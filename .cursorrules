# Cursor Rules для проекта UNO Game

## Общие правила
- **ВСЕГДА отвечай ТОЛЬКО на русском языке**
- **ВСЕ комментарии в коде ОБЯЗАТЕЛЬНО должны быть на русском языке**
- Используй русские названия переменных и функций где это уместно
- Сохраняй существующую архитектуру и структуру кода
- При объяснении кода всегда давай конкретные примеры, а не общие фразы
- Если нужно исправить баг - сразу предоставляй рабочий код, а не инструкции
- Фокусируйся на практических решениях, а не теории

## Контекст проекта
Это браузерная игра UNO с следующими особенностями:
- Ванильный JavaScript (без фреймворков)
- CSS анимации и градиенты
- ИИ для ботов
- Адаптивный дизайн
- Система анимации карт
- Логика игры UNO с правилами

## Правила разработки

### JavaScript
- Используй существующие глобальные переменные: `players`, `currentPlayerIndex`, `direction`, `deck`, `discardPile`
- Следуй паттерну разделения на функции: игровая логика, рендеринг, анимации, ИИ бота
- Все новые функции должны иметь описательные русские комментарии
- Используй `setTimeout` для анимаций и задержек ИИ
- Сохраняй существующую систему типов карт: `numbered`, `action`, `special`

### Игровая механика UNO
- Соблюдай правила UNO: совпадение по цвету/значению, специальные карты
- Обрабатывай действия карт: `reverse`, `skip`, `drawTwo`, `wild`, `wildDrawFour`
- Система UNO: игрок должен сказать UNO при одной карте
- Направление игры может меняться картой `reverse`
- Боты должны иметь реалистичные задержки и поведение

### CSS стилизация
- Используй существующую цветовую схему: градиенты, синие оттенки, неоновые акценты
- Сохраняй систему анимаций: hover эффекты, пульсации, переходы
- Адаптивность обязательна: медиа-запросы для мобильных устройств
- Карты должны иметь 3D эффекты и тени

### ИИ и логика ботов
- Боты должны принимать разумные решения: предпочитать обычные карты специальным
- Добавляй визуальные индикаторы "размышления" ботов
- Реалистичные задержки: 1-2 секунды на ход
- Боты должны автоматически говорить UNO

### Анимации
- Используй систему `card-animation` для перемещения карт
- Все переходы должны быть плавными (0.3-0.7s)
- Анимируй появление/исчезновение UI элементов
- Карты должны "лететь" от игрока к стопке сброса

### Обработка ошибок
- Проверяй длину колоды перед взятием карт
- Валидируй ходы игроков
- Обрабатывай граничные случаи (пустая колода, конец игры)

## Примеры кода

### Комментирование функций
```javascript
// Функция для взятия карты из колоды
function drawCard() {
    // Проверяем, что ход игрока и есть место в руке
    if (currentPlayerIndex === 0 && currentPlayer.hand.length < 10) {
        // ... логика
    }
}
```

### Создание новых карт
```javascript
const card = {
    color: 'red',           // Цвет карты
    value: '5',             // Значение карты  
    type: 'numbered',       // Тип: numbered/action/special
    name: 'Пятерка',        // Русское название
    displayValue: '5'       // Отображаемое значение
};
```

### Анимация карт
```javascript
// Создаем элемент для анимации перемещения карты
const animationCard = document.createElement('div');
animationCard.className = `card ${card.color} card-animation`;
// Позиционируем и анимируем
setTimeout(() => {
    animationCard.style.left = `${targetX}px`;
    animationCard.style.top = `${targetY}px`;
}, 10);
```

## Запрещенные действия
- НЕ используй внешние библиотеки или фреймворки
- НЕ меняй основную структуру HTML
- НЕ ломай существующую игровую логику
- НЕ удаляй анимации и визуальные эффекты
- НЕ пиши комментарии на английском языке

## Архитектурные особенности проекта

### Структура данных игры
- `players[]` - массив объектов игроков с полями: name, isHuman, hand[], unoSaid, pendingUno
- `deck[]` - массив карт в колоде
- `discardPile[]` - массив сброшенных карт  
- `currentPlayerIndex` - индекс текущего игрока
- `direction` - направление игры (1 или -1)

### Система событий
- Все пользовательские действия обрабатываются через onclick события
- Анимации запускаются через setTimeout с задержками
- Состояние игры обновляется синхронно после каждого действия

### Рендеринг
- `renderPlayers()` - обновление информации об игроках
- `renderPlayerHand()` - отрисовка карт в руке игрока  
- `updateDiscardPile()` - обновление стопки сброса
- `updateGameInfo()` - обновление информации о текущем состоянии

## Специфичные правила промптинга

### При запросах на изменение логики игры
1. Всегда учитывай официальные правила UNO
2. Проверяй влияние изменений на ИИ ботов
3. Сохраняй баланс игры - не делай её слишком простой или сложной
4. Тестируй граничные случаи (1 карта, пустая колода, смена направления)

### При запросах на визуальные изменения
1. Сохраняй существующую цветовую палитру проекта
2. Все новые элементы должны иметь hover эффекты
3. Анимации должны быть плавными и не отвлекающими
4. Учитывай производительность - не добавляй тяжелые эффекты

### При добавлении новых возможностей
1. Интегрируй их в существующую архитектуру 
2. Добавляй настройки через интерфейс, а не хардкод
3. Делай функции модульными и переиспользуемыми
4. Проверяй совместимость со всеми браузерами

### При отладке и исправлении багов
1. Сначала воспроизведи баг в консоли браузера
2. Проверь состояние глобальных переменных
3. Убедись что исправление не ломает другие части игры
4. Добавь проверки для предотвращения повторения бага

## Кодовые паттерны проекта

### Проверка возможности хода
```javascript
// Стандартная проверка совместимости карт
if (card.color === topCard.color || 
    card.value === topCard.value || 
    card.color === 'black') {
    // Карту можно играть
}
```

### Переход хода
```javascript
// Учитываем направление и количество игроков
currentPlayerIndex = (currentPlayerIndex + direction + players.length) % players.length;
```

### Анимация с обратным вызовом
```javascript
setTimeout(() => {
    // Код анимации
    setTimeout(() => {
        // Завершение анимации
        completeAction();
    }, animationDuration);
}, initialDelay);
```

### Создание карты с полным набором свойств
```javascript
const новаяКарта = {
    color: 'red',                    // Цвет: red, blue, green, yellow, black
    value: 'skip',                   // Значение карты
    type: 'action',                  // Тип: numbered, action, special
    name: 'Пропуск',                 // Русское название для отображения
    displayValue: '⊘'                // Символ для отображения на карте
};
```

### Безопасная работа с колодой
```javascript
// Всегда проверяй наличие карт перед использованием
if (deck.length === 0) {
    reshuffleDeck(); // Перетасовка из сброса
}

if (deck.length > 0) {
    const карта = deck.pop();
    // Используй карту
}
```

## При добавлении новых функций
1. Добавляй подробные русские комментарии
2. Тестируй совместимость с существующим кодом
3. Сохраняй стиль кодирования проекта
4. Учитывай адаптивность на мобильных устройствах
5. Добавляй анимации для улучшения UX
6. Документируй изменения в комментариях к функциям
7. Проверяй работу с ботами и человеческими игроками

## Типичные задачи и их решения

### Добавление новой специальной карты
1. Обнови `specialCards` массив или создай новый тип
2. Добавь обработку в `handleCardAction()`
3. Обнови `getCardName()` и `getDisplayValue()`
4. Добавь CSS стили для новой карты
5. Обнови логику ИИ бота для новой карты

### Изменение поведения ботов
- Модифицируй функцию `botPlay()` для стратегии
- Используй `Math.random()` для имитации "размышлений"
- Добавляй реалистичные задержки `setTimeout()`
- Обновляй визуальные индикаторы (класс `bot-thinking`)

### Добавление новых анимаций
- Создавай элементы с классом `card-animation`
- Используй `getBoundingClientRect()` для позиционирования
- Применяй CSS `transition` для плавности
- Убирай анимационные элементы через `setTimeout()`

### Исправление багов с состоянием игры
- Проверяй переменные в `console.log()`
- Убеждайся что `currentPlayerIndex` корректный
- Валидируй `direction` (должен быть 1 или -1)
- Проверяй длину массивов перед доступом к элементам

## Важные моменты для промптинга
- Всегда тестируй код в браузере перед предоставлением ответа
- Учитывай что игра должна работать на мобильных устройствах
- Помни о совместимости с разными браузерами (не используй новейшие JS фичи)
- Сохраняй производительность - игра должна работать плавно